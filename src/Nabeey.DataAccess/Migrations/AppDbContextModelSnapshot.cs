// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nabeey.DataAccess.Contexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Nabeey.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Nabeey.Domain.Entities.Answers.Answer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AssetId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Articles.Article", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ImageId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("ImageId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Articles.UserArticle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ArticleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserArticles");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Assets.Asset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Books.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AssetId")
                        .HasColumnType("bigint");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 3L,
                            Author = "George Orwell",
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3337),
                            Description = "Dystopian novel",
                            IsDeleted = false,
                            Text = "Text 3",
                            Title = "1984"
                        },
                        new
                        {
                            Id = 4L,
                            Author = "Harper Lee",
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3343),
                            Description = "Classic novel",
                            IsDeleted = false,
                            Text = "Text 4",
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            Id = 5L,
                            Author = "F. Scott Fitzgerald",
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3344),
                            Description = "American classic",
                            IsDeleted = false,
                            Text = "Text 5",
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            Id = 6L,
                            Author = "Jane Austen",
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3345),
                            Description = "Romantic novel",
                            IsDeleted = false,
                            Text = "Text 6",
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = 7L,
                            Author = "J.D. Salinger",
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3347),
                            Description = "Coming-of-age novel",
                            IsDeleted = false,
                            Text = "Text 7",
                            Title = "The Catcher in the Rye"
                        },
                        new
                        {
                            Id = 8L,
                            Author = "J.R.R. Tolkien",
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3348),
                            Description = "Epic fantasy",
                            IsDeleted = false,
                            Text = "Text 8",
                            Title = "Lord of the Rings"
                        },
                        new
                        {
                            Id = 9L,
                            Author = "J.K. Rowling",
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3349),
                            Description = "Fantasy novel",
                            IsDeleted = false,
                            Text = "Text 9",
                            Title = "Harry Potter and the Sorcerer's Stone"
                        },
                        new
                        {
                            Id = 10L,
                            Author = "J.R.R. Tolkien",
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3350),
                            Description = "Fantasy adventure",
                            IsDeleted = false,
                            Text = "Text 10",
                            Title = "The Hobbit"
                        },
                        new
                        {
                            Id = 11L,
                            Author = "Charles Dickens",
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3351),
                            Description = "Roman klassikasi",
                            IsDeleted = false,
                            Text = "Matni 11",
                            Title = "Oliver Twist"
                        },
                        new
                        {
                            Id = 12L,
                            Author = "Arthyr Konan Doil",
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3353),
                            Description = "Mashhur detektiv qissalari",
                            IsDeleted = false,
                            Text = "Matni 12",
                            Title = "Sherlok Holms"
                        },
                        new
                        {
                            Id = 13L,
                            Author = "Fyodor Dostoyevski",
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3354),
                            Description = "Rus roman klassikasi",
                            IsDeleted = false,
                            Text = "Matni 13",
                            Title = "Qo'shiqchi"
                        },
                        new
                        {
                            Id = 14L,
                            Author = "H. P. Lovecraft",
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3355),
                            Description = "Fantastika",
                            IsDeleted = false,
                            Text = "Matni 14",
                            Title = "Zulumotlar va qo'rqinlar vaqti"
                        },
                        new
                        {
                            Id = 15L,
                            Author = "Stephen King",
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3356),
                            Description = "G'azablandiruvchi roman",
                            IsDeleted = false,
                            Text = "Matni 15",
                            Title = "Qorquv"
                        },
                        new
                        {
                            Id = 16L,
                            Author = "Herman Melville",
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3357),
                            Description = "Qayiq ko'prik qirg'ishi",
                            IsDeleted = false,
                            Text = "Matni 16",
                            Title = "Mobi-Dik"
                        },
                        new
                        {
                            Id = 17L,
                            Author = "Munis Xo'ja",
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3358),
                            Description = "Xalq qahramoni tarixiy roman",
                            IsDeleted = false,
                            Text = "Matni 17",
                            Title = "Andijonlik"
                        },
                        new
                        {
                            Id = 18L,
                            Author = "Alexander Duma",
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3359),
                            Description = "Maktab roman klassikasi",
                            IsDeleted = false,
                            Text = "Matni 18",
                            Title = "Sulton Kuzo"
                        },
                        new
                        {
                            Id = 19L,
                            Author = "Edgar Allan Poe",
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3361),
                            Description = "G'azallar",
                            IsDeleted = false,
                            Text = "Matni 19",
                            Title = "Qo'rqinchli g'azal"
                        },
                        new
                        {
                            Id = 20L,
                            Author = "Ivan Denisovich",
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3362),
                            Description = "Olam shekillari roman",
                            IsDeleted = false,
                            Text = "Matni 20",
                            Title = "Bir kunda"
                        });
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Contents.ContentBook", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ContentId");

                    b.ToTable("ContentBooks");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Contexts.Content", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContentCategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContentCategoryId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Contexts.ContentAudio", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AudioId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AudioId");

                    b.HasIndex("ContentId");

                    b.ToTable("ContentAudios");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Contexts.ContentCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ContentCategories");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Contexts.ContentVideo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AssetId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("ContentId");

                    b.ToTable("ContentVideos");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.QuestionAnswers.QuestionAnswer", b =>
                {
                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<long>("AnswerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrue")
                        .HasColumnType("boolean");

                    b.Property<long>("QuizId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("QuestionId", "AnswerId");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Questions.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AssetId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.QuizQuestions.QuizQuestion", b =>
                {
                    b.Property<long>("QuizId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Quizzes.Quiz", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContentCategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContentCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AssetId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3522),
                            Email = "imona.kabirova@example.com",
                            FirstName = "Imona",
                            IsDeleted = false,
                            LastName = "Kabirova",
                            PasswordHash = "a",
                            Phone = "9001234567",
                            UserRole = 1
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3527),
                            Email = "jamshid.zayniev@example.com",
                            FirstName = "Jamshid",
                            IsDeleted = false,
                            LastName = "Zayniev",
                            PasswordHash = "a",
                            Phone = "9007654321",
                            UserRole = 1
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3529),
                            Email = "anastasiya.tomchuk@example.com",
                            FirstName = "Anastasiya",
                            IsDeleted = false,
                            LastName = "Tomchuk",
                            PasswordHash = "a",
                            Phone = "9009876543",
                            UserRole = 1
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3531),
                            Email = "iskandar.kodirov@example.com",
                            FirstName = "Iskandar",
                            IsDeleted = false,
                            LastName = "Kodirov",
                            PasswordHash = "a",
                            Phone = "9012345678",
                            UserRole = 1
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3532),
                            Email = "nodirshax.allanazarov@example.com",
                            FirstName = "Nodirshax",
                            IsDeleted = false,
                            LastName = "Allanazarov",
                            PasswordHash = "a",
                            Phone = "9012345679",
                            UserRole = 1
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3533),
                            Email = "asilbek.abdurashidov@example.com",
                            FirstName = "Asilbek",
                            IsDeleted = false,
                            LastName = "Abdurashidov",
                            PasswordHash = "a",
                            Phone = "9012345679",
                            UserRole = 1
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3535),
                            Email = "jasurbek.ergashev@example.com",
                            FirstName = "Jasurbek",
                            IsDeleted = false,
                            LastName = "Ergashev",
                            PasswordHash = "a",
                            Phone = "9012345680",
                            UserRole = 1
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3536),
                            Email = "takhmina.saidova@example.com",
                            FirstName = "Takhmina",
                            IsDeleted = false,
                            LastName = "Saidova",
                            PasswordHash = "a",
                            Phone = "9012345681",
                            UserRole = 1
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3538),
                            Email = "asadbek.qarshiyev@example.com",
                            FirstName = "Asadbek",
                            IsDeleted = false,
                            LastName = "Qarshiyev",
                            PasswordHash = "a",
                            Phone = "9012345682",
                            UserRole = 1
                        },
                        new
                        {
                            Id = 11L,
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3539),
                            Email = "sardor.sohinazarov@example.com",
                            FirstName = "Sardor",
                            IsDeleted = false,
                            LastName = "Sohinazarov",
                            PasswordHash = "a",
                            Phone = "9012345683",
                            UserRole = 1
                        },
                        new
                        {
                            Id = 12L,
                            CreatedAt = new DateTime(2023, 9, 25, 21, 16, 4, 313, DateTimeKind.Utc).AddTicks(3540),
                            Email = "raykhona.isroilova@example.com",
                            FirstName = "Raykhona",
                            IsDeleted = false,
                            LastName = "Isroilova",
                            PasswordHash = "a",
                            Phone = "9012345684",
                            UserRole = 1
                        });
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Answers.Answer", b =>
                {
                    b.HasOne("Nabeey.Domain.Entities.Assets.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Articles.Article", b =>
                {
                    b.HasOne("Nabeey.Domain.Entities.Contexts.Content", "Content")
                        .WithMany("Articles")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nabeey.Domain.Entities.Assets.Asset", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Articles.UserArticle", b =>
                {
                    b.HasOne("Nabeey.Domain.Entities.Articles.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nabeey.Domain.Entities.Users.User", "User")
                        .WithMany("UserArticles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Books.Book", b =>
                {
                    b.HasOne("Nabeey.Domain.Entities.Assets.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Contents.ContentBook", b =>
                {
                    b.HasOne("Nabeey.Domain.Entities.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nabeey.Domain.Entities.Contexts.Content", "Content")
                        .WithMany("Books")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Contexts.Content", b =>
                {
                    b.HasOne("Nabeey.Domain.Entities.Contexts.ContentCategory", "ContentCategory")
                        .WithMany("Contents")
                        .HasForeignKey("ContentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentCategory");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Contexts.ContentAudio", b =>
                {
                    b.HasOne("Nabeey.Domain.Entities.Assets.Asset", "Audio")
                        .WithMany()
                        .HasForeignKey("AudioId");

                    b.HasOne("Nabeey.Domain.Entities.Contexts.Content", "Content")
                        .WithMany("Audios")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audio");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Contexts.ContentVideo", b =>
                {
                    b.HasOne("Nabeey.Domain.Entities.Assets.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("Nabeey.Domain.Entities.Contexts.Content", "Content")
                        .WithMany("Videos")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.QuestionAnswers.QuestionAnswer", b =>
                {
                    b.HasOne("Nabeey.Domain.Entities.Answers.Answer", "Answer")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nabeey.Domain.Entities.Questions.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nabeey.Domain.Entities.Quizzes.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nabeey.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Questions.Question", b =>
                {
                    b.HasOne("Nabeey.Domain.Entities.Assets.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.QuizQuestions.QuizQuestion", b =>
                {
                    b.HasOne("Nabeey.Domain.Entities.Questions.Question", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nabeey.Domain.Entities.Quizzes.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Quizzes.Quiz", b =>
                {
                    b.HasOne("Nabeey.Domain.Entities.Contexts.ContentCategory", "ContentCategory")
                        .WithMany()
                        .HasForeignKey("ContentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nabeey.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Users.User", b =>
                {
                    b.HasOne("Nabeey.Domain.Entities.Assets.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Answers.Answer", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Contexts.Content", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Audios");

                    b.Navigation("Books");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Contexts.ContentCategory", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Questions.Question", b =>
                {
                    b.Navigation("QuestionAnswers");

                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("Nabeey.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("UserArticles");
                });
#pragma warning restore 612, 618
        }
    }
}
